@startuml
'https://plantuml.com/class-diagram
!pragma layout smetana

class App

package "user"{
class Account
class AccountHandler
class User
class GroceryList
}

package "plan"{
class MealPlan
class DailyMealPlan
class Recipe
class IngredientList
class Ingredient
}

package "filters"{
class Diet
class Recommendation
class FoodHandler
}

package "util"{
class UI
interface DBConnector
class DBUser
class DBRecipe
class DBIngredients
}

'Label on relations
App *-- AccountHandler
App *-- Recipe
AccountHandler *-- Account
Account *-- User
Account *-- MealPlan
MealPlan "1" *-- "has 1..many" DailyMealPlan
DailyMealPlan "1" *-- "has 1..3" Recipe
Recipe *-- IngredientList
IngredientList *-- Ingredient
DBConnector <|-- DBUser
DBConnector <|-- DBRecipe
DBConnector <|-- DBIngredients

'Methods and attributes
Account : - String email;
Account : - String password;
Account : - List<User> accountUsers
Account : + Account(String email, String password)
Account : + String getEmail();
Account : + String getPassword();
Account : + User createUser(String name, int age)
Account : + void deleteUser(String name)

AccountHandler : + void createUser();
AccountHandler : + void deleteUser();
AccountHandler : + void login();
AccountHandler : + void createAccount();
AccountHandler : - Set<Account> accounts;

User : - String name;
User : - int age;
User : + User(String name, int age);
User : + String getName();
User : + int getAge();

MealPlan : - List<DailyMealPlan> myMealPlan
MealPlan : + MealPlan(List<DailyMealPlan> myMealPlan)
MealPlan : + String chooseDate(String dateChosen)
MealPlan : + Recipe chooseRecipe(String recipeName)
MealPlan : + void addDailyMealPlan(String date, Recipe meal)
MealPlan : + void deleteDailyMealPlan(String date)

DailyMealPlan : - String date
DailyMealPlan : - Recipe dinner
DailyMealPlan : + DailyMealPlan(String date, Recipe meal)
DailyMealPlan : + void changeDate(String newDate)

Recipe : - String title
Recipe : - String description
Recipe : - int prepTime
Recipe : - int cookTime
Recipe : - IngredientList ingredients
Recipe : - List<String> steps
Recipe : + Recipe(String title)
Recipe : + void addIngredients()
Recipe : + void addSteps()

IngredientList : - HashMap<Ingredient ingredient, float amount>
IngredientList : + void addIngredient(Ingredient ingredient)
IngredientList : + void addAmount(float amount)

Ingredient : - String name
Ingredient : - String category
Ingredient : - HashMap<String nutrition, float content>

GroceryList : HashSet<Ingredient> myGroceryList

UI : - Scanner scan = new Scanner(System.in);
UI : + void displayMessage(String msg);
UI : + String getInput(String msg);

DBConnector : - DBPassword;
DBConnector : - static final String DB_URL;
DBConnector : - static final String USER;
DBConnector : + void saveData();
DBConnector : + Set<Object> readData();

DBUser : + void saveData(String username, password)
DBUser : + Set<User> readUserData();

DBRecipe : + Set<Recipe> readRecipe();
DBRecipe : + void saveData(Recipe dinner);

DBIngredients : + Set<Ingredient> readRecipe();
DBIngredients : + void saveData(Ingredients ingredient);

Diet : + Set<Recipe> filterByDietType(String dietType);
Diet : + Set<Recipe> filterByAllergies(String allergiesOf);
Diet : + Set<Recipe> filterByDietAllergy

Recommendation : + Set<Recipe> getRandomRecipe();
Recommendation : + Set<Recipe> getRandomRecipe(String dontLike);

FoodHandler : - List<Ingredient> ownRecipe;
FoodHandler : + addIngredientsToList();
FoodHandler : + removeIngredientFromList();
'User *-- Grocerylist
'Recipe *-- Diet
'Recipe *-- DBConnector
'Ingredient *-- DBConnector
@enduml