@startuml
'https://plantuml.com/class-diagram
!pragma layout smetana

class Application


package "user"{
class Account
class AccountHandler
class User
}

package "plan"{
class MealPlan
class DailyMealPlan
class Recipe
class IngredientList
class Ingredient
}

package "filters"{
class Diet
class Recommendation
class FoodHandler
}

package "util"{
interface DBConnector
class UI
class DBUser
class DBRecipe
class DBIngredients
}

'Label on relations
Application *-- UI
Application *-- MealPlanHandler
Application *-- DBRecipe

AccountHandler *-- Account
Account *-- User
Account *-- MealPlan
MealPlan "1" *-- "has 1..many" DailyMealPlan
DailyMealPlan "1" *-- "has 1..3" Recipe
Recipe *-- IngredientList
IngredientList *-- Ingredient
DBConnector <|-- DBUser
DBConnector <|-- DBRecipe
DBConnector <|-- DBIngredients

'Methods and attributes

'Attributes
Application : - UI ui = new UI();
Application : - MealPlanHandler mealPlanHandler = new MealPlanHandler();
Application : - DBRecipe dbRecipe = new DBRecipe();
Application : - Scanner scanner = new Scanner(System.in);

'Constructor
Application : + Application()

'Methods
Application : + void startMenu()
Application : + void menu()

Account : - String email;
Account : - String password;
Account : - List<User> users;
Account : - MealPlan myMealPlan;
Account : + Account(String email, String password)
Account : + String getEmail();
Account : + String getPassword();
Account : + User createUser(String name, int age)
Account : + void deleteUser(String name)
Account : + getMyMealPlan():
Account : + String toString();

AccountHandler : - Set<Account> accounts;
AccountHandler : - String email;
AccountHandler : - String password;
AccountHandler : - Account onlineAccount;
AccountHandler : - UI ui = new UI();
AccountHandler : - DBUser dbUser = new DBUser();
AccountHandler : + AccountHandler();
AccountHandler : + void mainMenu();
AccountHandler : + void loginForm();
AccountHandler : + void login();
AccountHandler : + void createAccount();
AccountHandler : + Account getOnlineAccount();


User : - String name;
User : - int age;
User : + User(String name, int age);
User : + String getName();
User : + int getAge();

MealPlan : - List<DailyMealPlan> myMealPlan
MealPlan : + MealPlan(List<DailyMealPlan> myMealPlan)
MealPlan : + String chooseData(String dateChosen)
MealPlan : + Recipe chooseRecipe(String recipeName)
MealPlan : + void addDailyMealPlan(String date, Recipe meal)
MealPlan : + void deleteDailyMealPlan(String date)

DailyMealPlan : - String date
DailyMealPlan : - Recipe dinner
DailyMealPlan : + DailyMealPlan(LocalDate date, Recipe meal)
DailyMealPlan : + void changeDate(String newDate)

Recipe : - String title
Recipe : - String description
Recipe : - int prepTime
Recipe : - int cookTime
Recipe : - String ingredients;
Recipe : - String steps;
Recipe : + Recipe(String title, String description, int cookTime, String ingredients, String steps)
Recipe : + Recipe(String title, String description, int prepTime, int cookTime)
Recipe : + Recipe(String title)
Recipe : + void addIngredients()
Recipe : + void addSteps()
Recipe : + String getTitle();
Recipe : + String getDescription();
Recipe : + int getPrepTime();
Recipe : + int getCookTime();
Recipe : + IngredientList getIngredients();
Recipe : + List<String> getMethod();


IngredientList : - HashMap<Ingredient, float> ingredientAmount;
IngredientList : + void addIngredient(Ingredient ingredient)
IngredientList : + void addAmount(float amount)

Ingredient : - String name
Ingredient : - String category
Ingredient : - HashMap<String, float> nutritionContent;

GroceryList : HashSet<Ingredient> myGroceryList

'Attributes
UI : - Scanner scanner = new Scanner(System.in);

'Methods
UI : + void displayMessage(String msg);
UI : + String getInput(String msg);
UI : + int displayMenu(List<String> menuItems);


DBConnector : - static final String DB_URL = "jdbc:mysql://34.141.56.218/mealplanner";
DBConnector : - static final String USER = "root";
DBConnector : - static final String PASS = "LAHY-Dat23!";

'Methods
DBUser : + void saveUser(String email, String password)
DBUser : + Set<Account> readUserData()

'Attributes
DBRecipe : - Connection conn = null;
DBRecipe : - PreparedStatement stmt = null;

'Methods
DBRecipe : + void saveRecipe(Recipe recipe)
DBRecipe : + Set<Recipe> readRecipes()

'Attributes
DBIngredients : - Connection conn = null;
DBIngredients : - PreparedStatement stmt = null;

'Methods
DBIngredients : + Set<Ingredient> readIngredients()


Diet : + Set<Recipe> filterByDietType(String dietType);
Diet : + Set<Recipe> filterByAllergies(String allergiesOf);
Diet : + Set<Recipe> filterByDietAllergy

Recommendation : + Set<Recipe> getRandomRecipe();
Recommendation : + Set<Recipe> getRandomRecipe(String dontLike);

FoodHandler : - List<Ingredient> ownRecipe;
FoodHandler : + addIngredientsToList();
FoodHandler : + removeIngredientFromList();
'User *-- Grocerylist
'Recipe *-- Diet
'Recipe *-- DBConnector
'Ingredient *-- DBConnector
@enduml